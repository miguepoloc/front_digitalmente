{"version":3,"file":"static/js/370.7e21da07.chunk.js","mappings":"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","sources":["components/Dashboard/mod_autoevaluativo/Resultado.jsx","components/Dashboard/mod_autoevaluativo/Resultados.jsx","pages/AutoevaluativoResultados.jsx"],"sourcesContent":["import React from 'react'\r\nimport { Resultados } from '../../Surveys/Resultados'\r\n\r\nexport const Resultado = ({ number, resultado, setRenderResultados, surveys }) => {\r\n    let encuestaConRespuestas = surveys.loadDataAnswerUser(resultado.respuestas)\r\n    var fecha = new Date(resultado.fecha);\r\n    let dia = fecha.getDate();\r\n    let mes = fecha.getMonth() + 1;\r\n    let anio = fecha.getFullYear();\r\n    let hora = fecha.getHours();\r\n    let minutos = fecha.getMinutes();\r\n    let segundos = fecha.getSeconds();\r\n\r\n    return (\r\n        <div className=\"\" >\r\n            {/* Validaciones que deberÃ­an ir en reusltados.creo. */}\r\n            {surveys.arrSurvey ? (\r\n                <>\r\n                    {\r\n                        <div className=\"m-2 card_SurveyRealizada d-flex align-items-center justify-content-center\"\r\n                            onClick={() => {\r\n                                setRenderResultados(<Resultados setRenderResultados={setRenderResultados} objResultados={encuestaConRespuestas.results()} mostrarMensajeDeAlerta={false}\r\n                                ></Resultados>)\r\n                            }}>\r\n                            <div className=\"text-center pb-0 d-flex flex-column align-items-center justify-content-center\">\r\n                                <p className='display-1  m-0 text-white'><strong>{number}</strong></p>\r\n                                <p className='m-0 text-white'>\r\n                                    {`${dia < 10 ? \"0\" + dia : dia}/${mes < 10 ? \"0\" + mes : mes}/${anio}`}\r\n                                    <br />\r\n                                    {`${hora < 10 ? \"0\" + hora : hora}:${minutos < 10 ? \"0\" + minutos : minutos}:${segundos < 10 ? \"0\" + segundos : segundos}`}\r\n                                </p>\r\n                            </div>\r\n                        </div>\r\n                    }\r\n                </>\r\n            ) :\r\n                (<></>)\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React, { useContext, useEffect, useState } from 'react'\r\nimport { AuthContext } from '../../../context/AuthContext';\r\nimport { GET_vista_pregunta_respuesta as getSurveys } from '../../../helpers/helperApi'\r\nimport { imgGanso } from '../../../helpers/helper_imagen_ganso';\r\nimport { Resultado } from './Resultado'\r\nimport './assets/css/Resultados.scss'\r\nimport { Surveysx as model_surveys } from '../../Surveys/assets/js/Surveysx'\r\nimport Axios from 'axios'\r\nimport { Loading } from '../../Loading'\r\nimport { ErrorGanso } from '../../ErrorGanso';\r\n\r\n\r\nexport const Resultados = () => {\r\n\r\n    const { authState } = useContext(AuthContext)\r\n    const { userInfo, token } = authState\r\n    const id_user = userInfo.id;\r\n\r\n    const id_sexo_user = userInfo.sexo;\r\n    const [resultados, setResultados] = useState(null);\r\n    const [renderResultados, setRenderResultados] = useState(null);\r\n    const [surveys, setSurveys] = useState(new model_surveys(null, id_user, id_sexo_user, false))\r\n    const [loading, setLoading] = useState(true);\r\n    const [error, setError] = useState(false);\r\n\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await getSurveys(token)\r\n            //console.log(response)\r\n            if (response) {\r\n                setSurveys(new model_surveys(response, id_user, id_sexo_user));\r\n            }\r\n            else {\r\n                //TODO: lanzar error\r\n                setError(true);\r\n                //console.log('No se pudieron traer los datos...')\r\n            }\r\n        }\r\n        const traerResultados = async () => {\r\n            let response\r\n            try {\r\n                response = await Axios({\r\n                    method: 'get',\r\n                    url: `${process.env.REACT_APP_API_URL}/api/vista_usuario_respuestas`,\r\n                    headers: {\r\n                        'authorization': `Bearer ${token}`\r\n                    }\r\n                })\r\n\r\n            } catch {\r\n                setError(true);\r\n            }\r\n\r\n\r\n            if (response) {\r\n                //console.log(\"ðŸš€ ~ file: Resultados.jsx ~ line 44 ~ traerResultados ~ response\", response)\r\n                setResultados(response.data)\r\n                // Y lo coloca en el estado de datos del usuario\r\n            } else {\r\n\r\n                //console.log('No se pudieron traer los datos...')\r\n            }\r\n            setLoading(false);\r\n        };\r\n\r\n        traerResultados();\r\n        fetchData();\r\n\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [token])\r\n\r\n\r\n\r\n    return (\r\n\r\n\r\n        <>\r\n            {loading ? <Loading /> : (\r\n                renderResultados !== null ? (<>{renderResultados}</>) : (\r\n                    error ? (<ErrorGanso text={\"Ups, parece que ha ocurrido un inconveniente.\"} />) : (\r\n                        resultados != null && surveys.arrSurvey ? (\r\n                            <>\r\n\r\n                                <div className='text-center'>\r\n                                    {resultados.length === 0 ? (<>\r\n                                        <img src={imgGanso.sorprendido} className=\"imgGanso_AutoEvaluativo_resultados mt-2\" alt=\"\" />\r\n                                        <h3 className='font-Geomanist mt-3'>Hola {userInfo.nombre.split(\" \")[0]}, Parece que no has hecho ningun test.</h3>\r\n                                    </>) : (<>\r\n                                        <img src={imgGanso.leyendo} className=\"imgGanso_AutoEvaluativo_resultados mt-2\" alt=\"\" />\r\n                                        <h3 className='font-Geomanist mt-3'>Hola {userInfo.nombre.split(\" \")[0]}, estos son los test que has hecho hasta el momento</h3></>)\r\n                                    }\r\n\r\n                                </div>\r\n                                <div className='d-flex my-4  justify-content-evenly flex-wrap '>\r\n                                    {\r\n                                        resultados.map((resultado, i) => {\r\n                                            //console.log(resultado)\r\n                                            return (<Resultado key={i} number={i + 1} resultado={resultado} surveys={surveys} setRenderResultados={setRenderResultados} />)\r\n\r\n                                        })\r\n                                    }\r\n\r\n                                </div>\r\n                            </>\r\n                        ) :\r\n                            (<></>)\r\n                    )\r\n                )\r\n            )}\r\n        </>\r\n    )\r\n}\r\n","/* eslint-disable camelcase */\r\nimport React, { useContext } from 'react'\r\nimport '../assets/css/nucleo-icons.scss'\r\nimport '../assets/css/nucleo-svg.scss'\r\nimport NavBarDashboard from '../components/Dashboard/NavBarDashboard'\r\nimport FooterDashboard from '../components/Dashboard/FooterDashboard'\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport { Resultados } from '../components/Dashboard/mod_autoevaluativo/Resultados'\r\n\r\nconst AutoevaluativoResultados = () => {\r\n    // Trae los datos del usuario\r\n    const { authState } = useContext(AuthContext)\r\n    // Se guardan en userInfo\r\n    const { userInfo } = authState\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"g-sidenav-show bg-gray-100 \"\r\n            >\r\n\r\n                <main className=\"main-content position-relative h-100 border-radius-lg \">\r\n                    <NavBarDashboard userInfo={userInfo} />\r\n\r\n                    <div className=\"container-fluid py-4\">\r\n\r\n                        <div >\r\n                            <Resultados />\r\n                        </div>\r\n                        <hr />\r\n\r\n                        <FooterDashboard />\r\n\r\n                    </div>\r\n                </main>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default AutoevaluativoResultados\r\n"],"names":["Resultado","number","resultado","setRenderResultados","surveys","encuestaConRespuestas","loadDataAnswerUser","respuestas","fecha","Date","dia","getDate","mes","getMonth","anio","getFullYear","hora","getHours","minutos","getMinutes","segundos","getSeconds","className","arrSurvey","onClick","Resultados","objResultados","results","mostrarMensajeDeAlerta","authState","useContext","AuthContext","userInfo","token","id_user","id","id_sexo_user","sexo","useState","resultados","setResultados","renderResultados","model_surveys","setSurveys","loading","setLoading","error","setError","useEffect","fetchData","getSurveys","response","traerResultados","Axios","method","url","process","headers","data","Loading","ErrorGanso","text","length","src","imgGanso","alt","nombre","split","map","i","NavBarDashboard","FooterDashboard"],"sourceRoot":""}