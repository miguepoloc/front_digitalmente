{"version":3,"file":"static/js/129.bc0cfe65.chunk.js","mappings":"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","sources":["components/Surveys/Resultados.jsx","components/Surveys/assets/js/Surveys_localStorage.js","components/Surveys/assets/js/Question.jsx","components/Surveys/assets/js/Survey.jsx","components/Surveys/assets/js/Surveysx.jsx"],"sourcesContent":["import React, { useEffect} from 'react'\r\nimport { imgGanso } from '../../helpers/helper_imagen_ganso'\r\nimport { gansoPensandoAlert } from '../../helpers/helper_Swal_Alerts'\r\nimport { Tip } from '../Dashboard/Tip'\r\nimport { FcInfo } from 'react-icons/fc'\r\nimport { useHistory } from 'react-router-dom'\r\n\r\nexport const Resultados = ({ objResultados, setRenderResultados, mostrarMensajeDeAlerta = true}) => {\r\n\r\n    const history = useHistory()\r\n    const text_justify = {\r\n        textAlign: \"justify\",\r\n        textJustify: \"inter-word\"\r\n    }\r\n    const mensajeDeAlerta = () => {\r\n        let mensaje = \"\";\r\n        if (objResultados.depresion.points >= 31 && objResultados.ansiedad.points >= 46) {\r\n            mensaje = \"ansiedad y depresión\";\r\n        }\r\n        else if (objResultados.depresion.points >= 31) {\r\n            mensaje = \"depresión\";\r\n        }\r\n        else if (objResultados.ansiedad.points >= 46) {\r\n            mensaje = \"ansiedad\";\r\n        }\r\n        if (mensaje !== \"\") {\r\n            gansoPensandoAlert(undefined, `<p style=\"text-align: justify;\">¡Hola! Tus resultados parecen ser altos con respecto a ${mensaje}. ¿Deseas contactarte con algún apoyo psicológico? A través de nuestro proyecto hermano SaludMental-SGR Unimagdalena puedes acceder a orientación psicológica gratuita a través de su chat virtual. Están siempre dispuestos a apoyar cualquier necesidad. Pero esto solo es una recomendación y depende de tu decisión.\r\n            <br/>\r\n            <br/>\r\n            Si quieres acceder a este servicio gratuito, ve al botón del chat que aparece en la parte inferior derecha de la página del proyecto: <a href= \"https://sgrsaludmental.unimagdalena.edu.co/\" style='color:#FC8890;'>¡Click aquí!</a>\r\n            <br/>\r\n            <br/>\r\n            Si no deseas contactarte, solo cierra este cuadro.\r\n            </p>\r\n            `, \"#FC8890\").then(window.scrollTo(0, 0)\r\n            )\r\n        }\r\n\r\n    }\r\n\r\n    if(mostrarMensajeDeAlerta){\r\n        mensajeDeAlerta();\r\n    }\r\n    \r\n    useEffect(() => {\r\n        window.scroll(0, 0)\r\n    }, [])\r\n    return (\r\n        <div className='container' id=\"resultados\">\r\n            <div className='mx-4 my-4 px-4 py-4' style={{ backgroundColor: \"#F0F0F0\", borderRadius: \"25px\" }} >\r\n                <div className='text-center' >\r\n                    <img\r\n                        src={imgGanso.escribiendo_250x200}\r\n                        style={{ width: \"200px\", height: \"200px\" }}\r\n                        alt=\"ganso\"\r\n                    />\r\n                    <h5 className='my-2'><b>¡Resultados!</b></h5>\r\n                    <p className='lh-base' style={text_justify}>\r\n                        ¡Hola! Parece que ya tenemos tus resultados. Recuerda que estas interpretaciones se dan a partir de tus respuestas y no se consideran un diagnóstico clínico si no se acompañan de una evaluación personalizada por un profesional. Solo es una forma de orientar como podrías estar percibiendo tu estado general.\r\n                    </p>\r\n                    <p className='lh-base' style={text_justify}>\r\n                        En lo que se refiere a tus emociones, en cuanto a la capacidad de atender tus sentimientos parece que <b>{objResultados.inteligenciaEmocional.result.atencion.text}</b>. En cuanto a tu capacidad de comprender bien tus estados emocionales parece que <b>{objResultados.inteligenciaEmocional.result.claridad.text}</b>. Finalmente, lo que respecta a tu capacidad para regular tus estados emocionales de forma adecuada parece que <b>{objResultados.inteligenciaEmocional.result.reparacion.text}</b>.\r\n                    </p>\r\n                    <p className='lh-base' style={text_justify}>\r\n                        Ahora, en cuanto a tu estrés percibido, parece que te encuentras en un nivel <b>{objResultados.escalaDeEstresPercibido.result}</b>. Recuerda que esto se evalúa en cuanto al último mes y depende de tu autoinforme.\r\n                    </p>\r\n                    <p className='lh-base' style={text_justify}>\r\n                        Por otro lado, en cuanto a otros factores importantes relacionados a tu salud mental, parece que te percibes con un nivel de ansiedad <b>{objResultados.ansiedad.result}</b>, <b>{objResultados.depresion.points <= 20 ? \"sin\" : \"con\"} </b> aparentes síntomas depresivos <b>{objResultados.depresion.result}</b>.\r\n                    </p>\r\n\r\n                    <Tip color={\"#2196F3\"} icon={<FcInfo className='mx-2' />} _class=\"mb-2 my-3\" title={\"Recuerda que\"} text={\"Aunque somos una estrategia psicoeducativa, en el marco de nuestro proyecto hermano Salud Mental SGR Unimagdalena, se tiene a disposición una serie de servicios de atención y orientación psicológica gratuita al cual puedes acceder, si lo deseas, a través de la página <a href='https://sgrsaludmental.unimagdalena.edu.co/' target='_blank'>Salud Mental SGR Unimagdalena</a> , donde tienes acceso a un chat virtual para atención inmediata, módulos de promoción y prevención psicoeducativas, solicitud de citas, entre otros.\"} />\r\n\r\n                    <p className='lh-base' style={text_justify}>\r\n                        Finalmente, en lo que trata en torno a los pensamientos automáticos, estos son los niveles que pareces presentar en este tipo de pensamientos:\r\n                    </p>\r\n                    <ul className='mt-2 ms-2 text-left' style={text_justify}>\r\n                        <li className='my-2'>Filtraje o abstracción selectiva: <b>{objResultados.inventarioDePensamientos.result.filtraje_o_abstracción_selectiva.text}</b></li>\r\n                        <li className='my-2'>Pensamiento polarizado:  <b>{objResultados.inventarioDePensamientos.result.pensamiento_polarizado.text}</b></li>\r\n                        <li className='my-2'>Sobregeneralización: <b>{objResultados.inventarioDePensamientos.result.sobregeneralizacion.text}</b></li>\r\n                        <li className='my-2'>Interpretación del pensamiento:<b>{objResultados.inventarioDePensamientos.result.interpretacion_del_pensamiento.text}</b></li>\r\n                        <li className='my-2'>Visión catastrófica: <b>{objResultados.inventarioDePensamientos.result.vision_catastrofica.text}</b></li>\r\n                        <li className='my-2'>Personalización: <b>{objResultados.inventarioDePensamientos.result.personalizacion.text}</b></li>\r\n                        <li className='my-2'>Falacia de control: <b>{objResultados.inventarioDePensamientos.result.falacia_de_control.text}</b></li>\r\n                        <li className='my-2'>Falacia de justicia: <b>{objResultados.inventarioDePensamientos.result.falacia_de_justicia.text}</b></li>\r\n                        <li className='my-2'>Razonamiento emocional: <b>{objResultados.inventarioDePensamientos.result.razonamiento_emocional.text}</b></li>\r\n                        <li className='my-2'>Falacia de cambio: <b>{objResultados.inventarioDePensamientos.result.falacia_de_cambio.text}</b></li>\r\n                        <li className='my-2'>Etiquetas globales: <b>{objResultados.inventarioDePensamientos.result.etiquetas_globales.text}</b></li>\r\n                        <li className='my-2'>Culpabilidad: <b>{objResultados.inventarioDePensamientos.result.culpabilidad.text}</b></li>\r\n                        <li className='my-2'>Los deberías: <b>{objResultados.inventarioDePensamientos.result.los_deberias.text}</b></li>\r\n                        <li className='my-2'>Tener razón: <b>{objResultados.inventarioDePensamientos.result.tener_razon.text}</b></li>\r\n                        <li className='my-2'>Falacia de recompensa divina: <b>{objResultados.inventarioDePensamientos.result.falacia_de_recompensa_divina.text}</b></li>\r\n                    </ul>\r\n                    <p className='lh-base text-center mb-4 mt-2' style={text_justify}>\r\n                        ¿Qué significa toda esa clasificación? Si quieres saber más de esto, así como de los otros factores, ¡DigitalMente te ayudará a conocer más!\r\n                    </p>\r\n\r\n                    {setRenderResultados ? (<><button className='btn btn-azul  text-center' onClick={() => setRenderResultados(null)}>Regresar</button></>) : (<><button className='btn btn-azul text-center' onClick={() => history.push('/dashboard')}>Regresar a la dashboard</button></>)}\r\n\r\n                </div>\r\n            </div>\r\n        </div>\r\n\r\n    )\r\n}\r\n","export class SurveysLocalStorage {\r\n    static NAME_ITEM = \"data_survey_local\";\r\n    static TIEMPO_MAXIMO = 48; //HORAS\r\n\r\n    // eslint-disable-next-line no-useless-constructor\r\n    constructor() { }\r\n\r\n    static buscarRespuestasUsuario(datos, id) {\r\n        for (let i = 0; i < datos.length; i++) {\r\n            //console.log(id)\r\n            if (datos[i].id_user === id) {\r\n                return i;\r\n            }\r\n        }\r\n        return -1;\r\n    }\r\n\r\n    static leerLocalStorage() {\r\n        const respuestasGuardadas = localStorage.getItem(this.NAME_ITEM);\r\n        return JSON.parse(respuestasGuardadas)\r\n    }\r\n\r\n    static recuperarDatosLocalStorage(id) {\r\n        const datosJson = this.leerLocalStorage();\r\n        //console.log(datosJson)\r\n        if (datosJson) {\r\n            let idx_usuario = this.buscarRespuestasUsuario(datosJson, id);\r\n\r\n            if (idx_usuario !== -1) {\r\n                const fechaDeInsercion = datosJson[idx_usuario].fechaDeInsercion\r\n                const fechaActual = Date.now()\r\n                const diffTime = Math.abs(fechaActual - fechaDeInsercion)\r\n                const diffHours = Math.ceil(diffTime / (1000 * 60 * 60))\r\n                if (diffHours <= this.TIEMPO_MAXIMO) {\r\n                    return datosJson[idx_usuario]\r\n                } else {\r\n                    datosJson.splice(idx_usuario, 1) //Elimino las respuestas de ese usuario.\r\n                    if (datosJson.length === 0) {\r\n                        window.localStorage.removeItem(this.NAME_ITEM)\r\n                    }\r\n                    else {\r\n                        localStorage.setItem(this.NAME_ITEM, JSON.stringify(datosJson)); //Guarda en el local storage\r\n                    }\r\n                    return null\r\n                }\r\n            }\r\n        }\r\n\r\n        // eslint-disable-next-line no-throw-literal\r\n        throw \"No se encontró información\";\r\n    }\r\n\r\n    static eliminarDatos(id) {\r\n        const datosJson = this.leerLocalStorage();\r\n        let idx_usuario = this.buscarRespuestasUsuario(datosJson, id);\r\n        if (idx_usuario !== -1) {\r\n            datosJson.splice(idx_usuario, 1) //Elimino las respuestas de ese usuario.\r\n            if (datosJson.length === 0) {\r\n                window.localStorage.removeItem(this.NAME_ITEM)\r\n            }\r\n            localStorage.setItem(this.NAME_ITEM, JSON.stringify(datosJson)); //Guarda en el local storage\r\n        }\r\n    }\r\n\r\n\r\n    static guardarEnLocalStorage(id_user, datos_surveys) {\r\n        // let _datos_surveys =\r\n        let datos = {\r\n            fechaDeInsercion: Date.now(),\r\n            datosSurveys: datos_surveys,//this.generateJsonToSend(),\r\n            id_user: id_user\r\n        }\r\n        let datosLocalStorage = this.leerLocalStorage();\r\n        if (!datosLocalStorage) {\r\n            datosLocalStorage = []\r\n            datosLocalStorage.push(datos); //Lo agrego al inicio del array para hacer más rápida su busqueda.\r\n        }\r\n        else {\r\n            let idx = this.buscarRespuestasUsuario(datosLocalStorage, id_user);\r\n            if (idx === -1) {\r\n                datosLocalStorage.push(datos);\r\n            } else {\r\n                datosLocalStorage[idx] = (datos);\r\n            }\r\n            /*\r\n            if (idx == 1) {\r\n                datosLocalStorage[idx] = datos\r\n            }\r\n            else {\r\n                datosLocalStorage.splice(idx, 1); //Lo muevo al inicio porque hará las futuras inserciones más rápidamente.\r\n                datosLocalStorage.push(datos);\r\n            }*/\r\n        }\r\n\r\n        localStorage.setItem(this.NAME_ITEM, JSON.stringify(datosLocalStorage));\r\n\r\n\r\n    }\r\n\r\n\r\n}","export class Question {\r\n    constructor(json) {\r\n        this.id_question = json.id_question;\r\n        this.question = json.question;\r\n        this.itemId_question = json.itemid_question;\r\n        this.answer = [];\r\n        this.addAnswer(json); //Cuando crean una pregunta el json trae una posible respuesta. entonces la creamos.\r\n        this.selected = null; // aquí guardaré la respuesta para esta pregunta\r\n        this.objSelected = null;\r\n    }\r\n\r\n    setSelected(id_answer) {\r\n        this.selected = id_answer\r\n        this.objSelected = this.answer.filter((answer) => answer.id_answer === id_answer)[0];\r\n    }\r\n    getSelected() {\r\n        return this.selected\r\n    }\r\n    getObjSelected() {\r\n        return this.objSelected\r\n    }\r\n    getItemId() {\r\n        return this.itemId_question;\r\n    }\r\n    addAnswer(json) {\r\n        this.answer.push({\r\n            \"id_answer\": json.id_answer,\r\n            \"answer\": json.answer,\r\n            \"value\": json.value,\r\n        })\r\n    }\r\n\r\n}\r\n","import { Question } from './Question'\r\n\r\nexport class Survey {\r\n    constructor(json) {\r\n        this.id_survey = json.id_survey;\r\n        this.name = json.name;\r\n        this.desc = json.desc;\r\n        this.color = json.color;\r\n        this.questions = [];\r\n        this.questionRecent = null;\r\n        this.addQuestion(json); //el json trae una pregunta, entonces la apregamos. añado ese objeto al reciente.\r\n    }\r\n\r\n\r\n    updateQuestionRecent(objQuestion) {\r\n        this.questionRecent = objQuestion;\r\n    }\r\n\r\n    pushQuestion(question) {\r\n        this.questions.push(question); //Las agrego en orden...\r\n        this.questions.sort(function (a, b) {\r\n            return a.id_question - b.id_question;\r\n        });\r\n    }\r\n\r\n    addQuestion(json) {\r\n        if (!this.questions.length) {\r\n            let objQuestion = new Question(json);\r\n            this.pushQuestion(objQuestion);\r\n            this.updateQuestionRecent(objQuestion);\r\n        } else {\r\n            //Si la pregunta existe en la lista, entonces , añadimos una posible respuesta.\r\n            if (this.questionRecent.id_question === json.id_question) {\r\n                this.questionRecent.addAnswer(json)\r\n            } else {\r\n                //Como el array ya contiene preguntas (quesions), procedo a buscar la pregunta (si existe) \r\n                let objQuestion = this.searchQuestion(json.id_question);\r\n                //Pregunto si search tiene algun elemento.\r\n                if (objQuestion) {\r\n                    objQuestion.addAnswer(json)\r\n                } else {\r\n                    objQuestion = new Question(json)\r\n                    this.pushQuestion(objQuestion);\r\n                }\r\n                //actualizo la pregunta reciente (questionRecente)\r\n                this.updateQuestionRecent(objQuestion)\r\n            }\r\n        }\r\n    }\r\n\r\n    searchQuestion(id) {\r\n        let search = this.questions.filter(question => question.id_question === id);\r\n        return (search.length) ? search[0] : null;\r\n    }\r\n\r\n    strQuestions() {\r\n        //pass\r\n    }\r\n\r\n\r\n    toString() {\r\n        return {\r\n            \"id_survey\": this.id_survey,\r\n            \"name\": this.name,\r\n            \"desc\": this.desc,\r\n            \"color\": this.color,\r\n            \"questions\": this.questions\r\n        }\r\n    }\r\n\r\n}\r\n","/* eslint-disable array-callback-return */\r\nimport { Survey } from './Survey'\r\nimport { SurveysLocalStorage } from './Surveys_localStorage'\r\n\r\nexport class Surveysx {\r\n\r\n    static id_user\r\n\r\n    constructor(arrSurvey, id_user, id_sexo, build = true) {\r\n        this.arrSurvey = arrSurvey;\r\n        this.jsonSurvey = [];\r\n        this.buildSurveys(build);\r\n        this.indiceActual = 0;\r\n        this.IndiceMaximo = this.jsonSurvey.length - 1;\r\n        this.id_user = id_user;\r\n        this.id_sexo = id_sexo;\r\n    }\r\n\r\n    guardarEnLocalStorage() {\r\n        SurveysLocalStorage.guardarEnLocalStorage(this.id_user, this.generateJsonToSend())\r\n    }\r\n\r\n\r\n    loadDataLocalStorage(data) {\r\n        if (data?.id_usuario) {\r\n            delete data['id_usuario']\r\n        }\r\n\r\n        for (let key in data) {\r\n            let value = data[key].sort((a, b) => { return a - b; });\r\n            let survey = this.searchSurvey(key);\r\n            // //console.log(survey.questions)\r\n            survey.questions = survey.questions.map((question, index) => {\r\n                question.setSelected(value[index])\r\n                return question\r\n            });\r\n        }\r\n        //this.jsonSurvey = data;\r\n        return this;\r\n        //this.markAllQuestionSelected();\r\n    }\r\n\r\n    loadDataAnswerUser(arrObj) {\r\n        // //console.log(\"hoooola\", arrObj)\r\n        for (let obj of arrObj) {\r\n            // //console.log(\"hoooola\", obj, obj.respuestas, obj.id_encuesta)\r\n            let value = obj.respuestas.sort((a, b) => { return a - b; });\r\n            let survey = this.searchSurvey(obj.id_encuesta);\r\n            // //console.log(survey.questions)\r\n            survey.questions = survey.questions.map((question, index) => {\r\n                question.setSelected(value[index])\r\n                return question\r\n            });\r\n        }\r\n        //this.jsonSurvey = data;\r\n        return this;\r\n        //this.markAllQuestionSelected();\r\n    }\r\n\r\n    getLengthJsonSurvey() {\r\n        return this.jsonSurvey.length\r\n    }\r\n\r\n    /**\r\n     * Asigna una respuesta a una pregunta.\r\n     * @param {number} id_pregunta\r\n     * @param {number} id_answer\r\n     */\r\n    selectOption(id_pregunta, id_answer) {\r\n        try {\r\n            this.jsonSurvey[this.indiceActual]\r\n                .searchQuestion(id_pregunta)\r\n                .setSelected(id_answer);\r\n            this.guardarEnLocalStorage()\r\n        } catch (e) {\r\n            //console.log(e);\r\n        }\r\n    }\r\n\r\n    selectAllOptionRandom() {\r\n        try {\r\n            this.jsonSurvey.map((survey) => {\r\n                survey.questions.map((question) => {\r\n                    let repuestaAleatorea = Math.floor(\r\n                        Math.random() * question.answer.length\r\n                    );\r\n                    question.setSelected(question.answer[repuestaAleatorea].id_answer);\r\n                });\r\n            });\r\n            this.guardarEnLocalStorage();\r\n        } catch (e) {\r\n            //console.log(e);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Cuando se crea una instancia con build = false esto permite agregarle un json\r\n     * y contruir el json de encuestas (jsonArray)\r\n     * @param {Array<json>} arrSurvey\r\n     */\r\n\r\n    setArrayAndBuild(arrSurvey) {\r\n        this.arrSurvey = arrSurvey;\r\n        this.buildSurveys();\r\n        this.IndiceMaximo = this.jsonSurvey.length - 1;\r\n    }\r\n\r\n    /**\r\n     * Retorna un clon del objeto.\r\n     * @returns {Survey}\r\n     */\r\n    clone() {\r\n        return Object.create(\r\n            Object.getPrototypeOf(this),\r\n            Object.getOwnPropertyDescriptors(this)\r\n        );\r\n    }\r\n\r\n    /**\r\n     * Verifica si todas las preguntas de la encuesta actual han sido respondidas.\r\n     * @returns {boolean}\r\n     */\r\n\r\n    isAllQuestionsSelected() {\r\n        return this.jsonSurvey[this.indiceActual].questions.every(\r\n            (objQuestion) => objQuestion.getSelected() != null\r\n        );\r\n    }\r\n\r\n    isAllSurveysAnswered() {\r\n        return this.jsonSurvey.every(survey => {\r\n            return survey.questions.every(\r\n                (objQuestion) => objQuestion.getSelected() != null\r\n            )\r\n        });\r\n    }\r\n\r\n    restultsAnsiedadTest(ansiedadTestId) {\r\n        let objJson = { \"result\": \"\", \"points\": 0 };\r\n        const ansiedadTest = this.searchSurvey(ansiedadTestId);\r\n        const points = this.sumAllQuestions(ansiedadTest);\r\n\r\n        if (points >= 15 && points <= 30) {\r\n            objJson.result = \"baja\"\r\n        } else if (points >= 31 && points <= 45) {\r\n            objJson.result = \"media\"\r\n        } else if (points >= 46 && points <= 60) {\r\n            objJson.result = \"alta\"\r\n        } else {\r\n            objJson.result = \"Disculpa,Algo ha salido mal. Si ves este mensaje, escribenos.\"\r\n        }\r\n\r\n        objJson.points = points\r\n\r\n        return objJson\r\n    }\r\n\r\n    restultsDepresionTest(depresionTestId) {\r\n        let objJson = { \"result\": \"\", \"points\": 0 };\r\n        const depresionTest = this.searchSurvey(depresionTestId);\r\n        const points = this.sumAllQuestions(depresionTest);\r\n\r\n        if (points >= 0 && points <= 20) {\r\n            objJson.result = \"\" //Sin sintomas depresivos. lo dejo vacio porque en la plantialla decia lo mismo.\r\n        } else if (points >= 21 && points <= 30) {\r\n            objJson.result = \"moderados\"\r\n        } else if (points >= 31) {\r\n            objJson.result = \"graves\"\r\n        }\r\n        else {\r\n            objJson.result = \"Disculpa,Algo ha salido mal. Si ves este mensaje, escribenos.\"\r\n        }\r\n\r\n        objJson.points = points\r\n\r\n        return objJson\r\n    }\r\n\r\n\r\n    restultsEscalaDeEstresPercibidoTest(EscalaDeEstresPercibidoId) {\r\n        let objJson = { \"result\": \"\", \"points\": 0 };\r\n        const EscalaDeEstresPercibidoIdTest = this.searchSurvey(EscalaDeEstresPercibidoId);\r\n        const points = this.sumAllQuestions(EscalaDeEstresPercibidoIdTest);\r\n\r\n        if (points >= 0 && points <= 19) {\r\n            objJson.result = \"bajo\"\r\n        } else if (points >= 20 && points <= 38) {\r\n            objJson.result = \"medio\"\r\n        } else if (points >= 39) {\r\n            objJson.result = \"alto\"\r\n        }\r\n        else {\r\n            objJson.result = \"Disculpa, Algo ha salido mal. Si ves este mensaje, escribenos.\"\r\n        }\r\n\r\n        objJson.points = points\r\n\r\n        return objJson\r\n    }\r\n\r\n    restultsInventarioDePensamientosAutomaticosTest(id) {\r\n        let objJson = { \"result\": {}, \"points\": 0 };\r\n\r\n        const clasificacion = (points) => {\r\n            if (points <= 3)\r\n                return \"bajo\";\r\n            else if (points >= 4 && points <= 6)\r\n                return \"medio\";\r\n            else\r\n                return \"alto\";\r\n        }\r\n\r\n        const inventarioDePensamientosAutomaticos = this.searchSurvey(id);\r\n        let nameItems = [\"filtraje_o_abstracción_selectiva\", \"pensamiento_polarizado\", \"sobregeneralizacion\",\r\n            \"interpretacion_del_pensamiento\", \"vision_catastrofica\", \"personalizacion\", \"falacia_de_control\", \"falacia_de_justicia\",\r\n            \"razonamiento_emocional\", \"falacia_de_cambio\", \"etiquetas_globales\", \"culpabilidad\", \"los_deberias\", \"tener_razon\",\r\n            \"falacia_de_recompensa_divina\"]\r\n        let points = 0;\r\n        for (let i = 1; i <= 15; i++) {\r\n            points = this.sumAnyQuestions(inventarioDePensamientosAutomaticos, [i, (i + 15), (i + 30)])\r\n            objJson.result[nameItems[i - 1]] = { \"text\": clasificacion(points), \"points\": points }\r\n        }\r\n        return objJson;\r\n    }\r\n\r\n    restultsInteligenciaEmocionalTest(inteligenciaEmocionalId, sexo) {\r\n        let objJson = { \"result\": { \"atencion\": { text: \"\", points: 0 }, \"claridad\": { text: \"\", points: 0 }, \"reparacion\": { text: \"\", points: 0 } } };\r\n        const depresionTest = this.searchSurvey(inteligenciaEmocionalId);\r\n        const resultado = {\r\n            atencion: { debeMejorar: \"debes mejorar tu atención: prestas poca atención\", adecuada: \"tienes una adecuada atención\", demasiada: \"debes mejorar tu atención: prestas demasiada atención. Una atención excesiva sin una comprensión profunda de las emociones podría resultar perjudicial. ¡Conoce más en los módulos!\" }\r\n            , claridad: { debeMejorar: \"debes mejorar tu comprensión\", adecuada: \"tienes una adecuada comprensión\", excelente: \"tienes una excelente comprensión\" },\r\n            reparacion: { debeMejorar: \"debes mejorar tu regulación\", adecuada: \"tienes una adecuada regulación\", excelente: \"tienes una excelente regulación\" }\r\n        }\r\n        const pointsAtencion = this.sumAnyQuestions(depresionTest, [1, 2, 3, 4, 5, 6, 7, 8]);\r\n        const pointsClaridad = this.sumAnyQuestions(depresionTest, [9, 10, 11, 12, 13, 14, 15, 16]);\r\n        const pointsReparacion = this.sumAnyQuestions(depresionTest, [17, 18, 19, 20, 21, 22, 23, 24]);\r\n\r\n        if (sexo.toLowerCase() === \"m\") {\r\n            if (pointsAtencion <= 21) {\r\n                objJson.result.atencion.text = resultado.atencion.debeMejorar;\r\n            }\r\n            else if (pointsAtencion >= 22 && pointsAtencion <= 32) {\r\n                objJson.result.atencion.text = resultado.atencion.adecuada;\r\n            }\r\n            else {\r\n                objJson.result.atencion.text = resultado.atencion.demasiada\r\n            }\r\n\r\n            if (pointsClaridad <= 25) {\r\n                objJson.result.claridad.text = resultado.claridad.debeMejorar;\r\n            } else if (pointsClaridad >= 26 && pointsClaridad <= 35) {\r\n                objJson.result.claridad.text = resultado.claridad.adecuada;\r\n            } else {\r\n                objJson.result.claridad.text = resultado.claridad.excelente;\r\n            }\r\n\r\n            if (pointsReparacion <= 23) {\r\n                objJson.result.reparacion.text = resultado.reparacion.debeMejorar;\r\n            } else if (pointsReparacion >= 24 && pointsReparacion <= 35) {\r\n                objJson.result.reparacion.text = resultado.reparacion.adecuada;\r\n            } else {\r\n                objJson.result.reparacion.text = resultado.reparacion.excelente;\r\n            }\r\n        }\r\n        else if (sexo.toLowerCase() === \"f\") {\r\n            if (pointsAtencion <= 24) {\r\n                objJson.result.atencion.text = resultado.atencion.debeMejorar;\r\n            }\r\n            else if (pointsAtencion >= 25 && pointsAtencion <= 35) {\r\n                objJson.result.atencion.text = resultado.atencion.adecuada;\r\n            }\r\n            else {\r\n                objJson.result.atencion.text = resultado.atencion.demasiada;\r\n            }\r\n\r\n            if (pointsClaridad <= 23) {\r\n                objJson.result.claridad.text = resultado.claridad.debeMejorar;\r\n            } else if (pointsClaridad >= 24 && pointsClaridad <= 34) {\r\n                objJson.result.claridad.text = resultado.claridad.adecuada;\r\n            } else {\r\n                objJson.result.claridad.text = resultado.claridad.excelente\r\n            }\r\n\r\n            if (pointsReparacion <= 23) {\r\n                objJson.result.reparacion.text = resultado.reparacion.debeMejorar;\r\n            } else if (pointsReparacion >= 24 && pointsReparacion <= 34) {\r\n                objJson.result.reparacion.text = resultado.reparacion.adecuada;\r\n            } else {\r\n                objJson.result.reparacion.text = resultado.reparacion.excelente;\r\n            }\r\n        }\r\n\r\n        objJson.result.atencion.points = pointsAtencion;\r\n        objJson.result.claridad.points = pointsClaridad;\r\n        objJson.result.reparacion.points = pointsReparacion;\r\n\r\n        return objJson\r\n    }\r\n\r\n    sumAllQuestions(encuesta) {\r\n        //console.log(\"🚀 ~ file: Surveysx.jsx ~ line 301 ~ Surveysx ~ sumAllQuestions ~ encuesta\", encuesta)\r\n\r\n        return encuesta.questions.reduce((accumulator, question) => accumulator + question.getObjSelected().value, 0)\r\n    }\r\n\r\n    sumAnyQuestions(encuesta, ArrIdQuestionsToSum) {\r\n        return encuesta.questions\r\n            .filter((question) => ArrIdQuestionsToSum.includes(question.getItemId()))\r\n            .reduce((accumulator, question) => accumulator + question.getObjSelected().value, 0)\r\n    }\r\n\r\n    results() {\r\n        //TODO: traer el sexo desde el constructor...\r\n        let objJson = {}\r\n        let idTest = {\r\n            ansiedad: 3,\r\n            depresion: 4,\r\n            inteligencia: 5,\r\n            estresPercibido: 6,\r\n            inventarioDePensamientos: 7\r\n        }\r\n        let sexo = this.id_sexo === 1 ? 'm' : 'f';\r\n        objJson[\"ansiedad\"] = this.restultsAnsiedadTest(idTest.ansiedad);\r\n        objJson[\"depresion\"] = this.restultsDepresionTest(idTest.depresion);\r\n        objJson[\"inteligenciaEmocional\"] = this.restultsInteligenciaEmocionalTest(idTest.inteligencia, sexo);\r\n        objJson[\"escalaDeEstresPercibido\"] = this.restultsEscalaDeEstresPercibidoTest(idTest.estresPercibido);\r\n        objJson[\"inventarioDePensamientos\"] = this.restultsInventarioDePensamientosAutomaticosTest(idTest.inventarioDePensamientos);\r\n        return objJson\r\n    }\r\n\r\n    /**\r\n     * @returns {Survey | null} Retorna un clon del objeto si puede pasar a la siguien encuesta, de lo contrario retorna null.\r\n     */\r\n    nextSurvey() {\r\n        return this.incIndiceActual() ? this.clone() : null; //Si no puede avanzar más no clona el objeto.\r\n    }\r\n\r\n    /**\r\n     * Marca las respuestas que hayan sido respondidas en la encuesta actual.\r\n     */\r\n    markAllQuestionSelected() {\r\n        this.jsonSurvey[this.indiceActual].questions.map((objQuestion) => {\r\n            if (objQuestion.getSelected())\r\n                document.getElementById(`answer_${objQuestion.getSelected()}`).click();\r\n        });\r\n    }\r\n\r\n    /**\r\n     * @returns {Survey | null} Retorna un clon del objeto si puede ir a la encuesta anterior, de lo contrario retorna null.\r\n     */\r\n    prevSurvey() {\r\n        return this.decIndiceActual() ? this.clone() : null; //Si no puede retroceder más no clona el objeto.\r\n    }\r\n\r\n    /**\r\n     * valida si puede incrementar el indice actual\r\n     * @returns {boolean}\r\n     */\r\n    incIndiceActual() {\r\n        //Todo: validar las respuestas de la encuesta actual antes de incrementar.\r\n        if (this.isAllQuestionsSelected()) {\r\n            let valorEntrante = this.indiceActual;\r\n            this.indiceActual =\r\n                this.indiceActual + 1 <= this.IndiceMaximo\r\n                    ? this.indiceActual + 1\r\n                    : this.IndiceMaximo;\r\n            return valorEntrante !== this.indiceActual; //Si se incrementa retorna true.\r\n        }\r\n        return false;\r\n    }\r\n\r\n    /**\r\n     * valida si puede decrementar el indice actual\r\n     * @returns {boolean}\r\n     */\r\n    decIndiceActual() {\r\n        let valorEntrante = this.indiceActual;\r\n        this.indiceActual = this.indiceActual - 1 >= 0 ? this.indiceActual - 1 : 0;\r\n        return valorEntrante !== this.indiceActual; //Si se decrementa retorna true.\r\n    }\r\n\r\n    getjson() {\r\n        return this.jsonSurvey;\r\n    }\r\n\r\n    /**\r\n     * La funcion ordena las encuestas a medida que las agrega.\r\n     * @param {Survey} newSurvey\r\n     */\r\n    pushSurvey(newSurvey) {\r\n        this.jsonSurvey.push(newSurvey); //Las agrego en orden...\r\n        this.jsonSurvey.sort(function (a, b) {\r\n            return a.id_survey - b.id_survey;\r\n        });\r\n    }\r\n\r\n    buildSurveys(build) {\r\n        if (build) {\r\n\r\n            let surveyRecent = null;\r\n            this.arrSurvey.forEach((survey) => {\r\n                //si surveyRecent es null entonces agrego una nueva encuesta.\r\n                if (!surveyRecent) {\r\n                    surveyRecent = new Survey(survey);\r\n                    // console.count(\"Cree una nueva por primera vez.\");\r\n                    //debugger\r\n                    this.pushSurvey(surveyRecent);\r\n                } else if (survey.id_survey === surveyRecent.id_survey) {\r\n                    surveyRecent.addQuestion(survey);\r\n                } else {\r\n                    let objSurvey = this.searchSurvey(survey.id_survey);\r\n\r\n                    if (objSurvey) {\r\n                        objSurvey.addQuestion(survey);\r\n                    } else {\r\n                        objSurvey = new Survey(survey);\r\n                        this.pushSurvey(objSurvey);\r\n                    }\r\n                    //actualizo la encuesta reciente (surveyRecent)\r\n                    surveyRecent = objSurvey;\r\n                }\r\n            });\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Busca una encuesta por su id.\r\n     * @param {number} id\r\n     * @returns {Survey}\r\n     */\r\n    searchSurvey(id) {\r\n        let search = this.jsonSurvey.filter((survey) => survey.id_survey === parseInt(id));\r\n        return search.length ? search[0] : null;\r\n    }\r\n\r\n    /**\r\n     * \r\n     * @param {Number} id_usuario \r\n     * @returns JSON\r\n     */\r\n    generateJsonToSend() {\r\n        //Una vez todo se haya respondido\r\n        //Id usuario\r\n        let json = {};\r\n        json[\"id_usuario\"] = this.id_user;\r\n        this.jsonSurvey.map((survey) => {\r\n            json[survey.id_survey] = [];\r\n            survey.questions.map((question) => {\r\n                json[survey.id_survey].push(question.getSelected());\r\n            });\r\n        });\r\n        return json;\r\n    }\r\n}\r\n"],"names":["Resultados","objResultados","setRenderResultados","mostrarMensajeDeAlerta","history","useHistory","text_justify","textAlign","textJustify","mensaje","depresion","points","ansiedad","gansoPensandoAlert","undefined","then","window","scrollTo","mensajeDeAlerta","useEffect","scroll","className","id","style","backgroundColor","borderRadius","src","imgGanso","width","height","alt","inteligenciaEmocional","result","atencion","text","claridad","reparacion","escalaDeEstresPercibido","color","icon","_class","title","inventarioDePensamientos","filtraje_o_abstracción_selectiva","pensamiento_polarizado","sobregeneralizacion","interpretacion_del_pensamiento","vision_catastrofica","personalizacion","falacia_de_control","falacia_de_justicia","razonamiento_emocional","falacia_de_cambio","etiquetas_globales","culpabilidad","los_deberias","tener_razon","falacia_de_recompensa_divina","onClick","push","SurveysLocalStorage","datos","i","length","id_user","respuestasGuardadas","localStorage","getItem","this","NAME_ITEM","JSON","parse","datosJson","leerLocalStorage","idx_usuario","buscarRespuestasUsuario","fechaDeInsercion","fechaActual","Date","now","diffTime","Math","abs","ceil","TIEMPO_MAXIMO","splice","removeItem","setItem","stringify","datos_surveys","datosSurveys","datosLocalStorage","idx","Question","json","id_question","question","itemId_question","itemid_question","answer","addAnswer","selected","objSelected","id_answer","filter","value","Survey","id_survey","name","desc","questions","questionRecent","addQuestion","objQuestion","sort","a","b","searchQuestion","pushQuestion","updateQuestionRecent","search","Surveysx","arrSurvey","id_sexo","build","jsonSurvey","buildSurveys","indiceActual","IndiceMaximo","generateJsonToSend","data","id_usuario","key","survey","searchSurvey","map","index","setSelected","arrObj","obj","respuestas","id_encuesta","id_pregunta","guardarEnLocalStorage","e","repuestaAleatorea","floor","random","Object","create","getPrototypeOf","getOwnPropertyDescriptors","every","getSelected","ansiedadTestId","objJson","ansiedadTest","sumAllQuestions","depresionTestId","depresionTest","EscalaDeEstresPercibidoId","EscalaDeEstresPercibidoIdTest","clasificacion","inventarioDePensamientosAutomaticos","nameItems","sumAnyQuestions","inteligenciaEmocionalId","sexo","resultado","debeMejorar","adecuada","demasiada","excelente","pointsAtencion","pointsClaridad","pointsReparacion","toLowerCase","encuesta","reduce","accumulator","getObjSelected","ArrIdQuestionsToSum","includes","getItemId","idTest","restultsAnsiedadTest","restultsDepresionTest","restultsInteligenciaEmocionalTest","restultsEscalaDeEstresPercibidoTest","restultsInventarioDePensamientosAutomaticosTest","incIndiceActual","clone","document","getElementById","click","decIndiceActual","isAllQuestionsSelected","valorEntrante","newSurvey","surveyRecent","forEach","objSurvey","pushSurvey","parseInt"],"sourceRoot":""}