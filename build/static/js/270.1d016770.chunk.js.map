{"version":3,"file":"static/js/270.1d016770.chunk.js","mappings":"oUAoDA,EAhDiB,SAAC,GAOX,IANHA,EAME,EANFA,SACAC,EAKE,EALFA,KACAC,EAIE,EAJFA,MACAC,EAGE,EAHFA,MACAC,EAEE,EAFFA,aACAC,EACE,EADFA,eAEA,OACI,iBAAKC,UAAU,yBAAf,WACI,gBACIA,UAAU,yCACVC,MAAO,CAAEC,gBAAiBL,GAF9B,UAII,eAAIG,UAAU,uCAAd,SACMJ,EAAQ,EAAK,KAAOF,EAASA,cAGvC,gBAAKM,UAAU,gDAAf,UACI,gBAAKA,UAAU,gCAAf,SACKN,EAASS,OAAOC,KAAI,SAACD,EAAQE,GAC1B,OACI,SAACC,EAAA,EAAD,CACIC,MAAK,UAAKZ,EAAL,YAAaC,GAClBY,aAAcL,EAAOA,OACrBM,IAAG,iBAAYN,EAAOO,WAEtBC,kBAAmB,kBAAMb,EACrBJ,EAASkB,YACTT,EAAOO,UAFQ,EAInBG,YAAaV,EAAOO,UACpBX,eAAgBA,EAChBH,MAAOA,GAXX,UAIYO,EAAOO,WAU1B,UAKpB,ECTD,EA/BkB,SAAC,GAKZ,IAJHI,EAIE,EAJFA,UACAnB,EAGE,EAHFA,KACAE,EAEE,EAFFA,MACAC,EACE,EADFA,aAEA,OACI,gBAAKE,UAAU,aAAf,UACI,gBAAKA,UAAU,MAAf,SACKc,EAAUV,KAAI,SAACV,EAAUE,GACtB,OACI,SAAC,EAAD,CACID,KAAMA,EACND,SAAUA,EACVE,MAAOA,EACPC,MAAOA,EAEPC,aAAcA,EACdC,eAAgBL,EAASqB,UAFpBrB,EAASkB,YAKzB,OAIhB,ECFD,EAzBe,SAAC,GAA8B,IAA5BI,EAA2B,EAA3BA,OAAQlB,EAAmB,EAAnBA,aAItB,OAHamB,SAASC,gBACjBjB,MAAMkB,YAAY,eAAgBH,EAAOnB,QAG1C,iCACI,iBAAKG,UAAU,eAAeC,MAAO,CAAEmB,gBAAiBJ,EAAOnB,OAA/D,WACI,eAAII,MAAO,CAAEJ,MAAOmB,EAAOnB,OAA3B,SAAqCmB,EAAOrB,QAE5C,uBAAIqB,EAAOK,WAEf,SAAC,EAAD,CACIP,UAAWE,EAAOF,UAClBnB,KAAMqB,EAAOrB,KACbE,MAAOmB,EAAOnB,MAEdC,aAAcA,GADTkB,EAAOrB,KAAOqB,EAAOM,aAKzC,E,sFCLKC,EAAyB,YAC3BC,EAAAA,EAAAA,IAAW,SAAU,kJACxB,EAoRD,EAlRgB,WACZ,IAAQC,GAAcC,EAAAA,EAAAA,YAAWC,EAAAA,GAAzBF,UAEAG,EAAoBH,EAApBG,SAAUC,EAAUJ,EAAVI,MAEZC,EAAUF,EAASG,GACnBC,EAAeJ,EAASK,KAAKF,GAEnC,GAA8BG,EAAAA,EAAAA,UAAS,IAAIC,EAAAA,EAAc,KAAML,EAASE,GAAc,IAAtF,eAAOI,EAAP,KAAgBC,EAAhB,KACA,GAA8BH,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KACA,GAA0BL,EAAAA,EAAAA,WAAS,GAAnC,eAAOM,EAAP,KAAcC,EAAd,KACA,GAAoCP,EAAAA,EAAAA,WAAS,GAA7C,eAAOQ,EAAP,KAAmBC,EAAnB,KACA,GAAkDT,EAAAA,EAAAA,WAAS,GAA3D,eAAOU,EAAP,KAA0BC,EAA1B,KACA,GAAsCX,EAAAA,EAAAA,UAAS,MAA/C,eAAOY,EAAP,KAAoBC,EAApB,KAEMC,EAA6B,WAC/B,IAAIC,EACJ,IAQI,OAPAA,EAAQC,EAAAA,EAAAA,2BAA+CpB,KAGnDqB,EAAAA,EAAAA,IAAY,oBAAkB,oSAAoRC,OAAWA,IAE7TC,EAAAA,EAAAA,IAAa,SAAU,+VAA4UD,OAAWA,GAE3WH,CAGV,CAFC,MAAOT,GACL,OAAO,IACV,CACJ,GAODc,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAS,yCAAG,4GACSC,EAAAA,EAAAA,IAAW3B,GADpB,OAGd,GAFM4B,EADQ,OAIV,IACUC,EAAOV,IAITX,EAFAqB,EAEW,IAAIvB,EAAAA,EAAcsB,EAAU3B,EAASE,GAAc2B,qBAAqBD,EAAKE,cAE7E,IAAIzB,EAAAA,EAAcsB,EAAU3B,EAASE,IAGpDO,GAAW,EAKd,CAJC,MAAOsB,GAELtB,GAAW,GACXE,GAAS,EACZ,MAEDF,GAAW,GACXE,GAAS,GAtBC,2CAAH,qDA0Bfc,GAEH,GAAE,KAEHD,EAAAA,EAAAA,YACI,WACQlB,EAAQ0B,WACRC,GAEP,GAED,CAACrB,IAGL,IAAMqB,EAAc,WAEfnC,EAASoC,SAAgD,WAArCC,EAAAA,EAAAA,OAAc,eAAe,EACrD,EAMKC,EAAoB,yCAAG,uGAAOC,IAAP,kCAKpB/B,EAAQgC,0BAA4BD,GACrC5C,KAGE8C,EAAgBF,EAAS/B,EAAQkC,aAAelC,EAAQmC,gBAE1DlC,EAAWgC,GACX1B,GAAeD,IAZM,2CAAH,qDAgBpB8B,EAAkB,WAIpB,IAHA,IAAMC,EAAkBrC,EAAQsC,sBAC1BC,EAAcvC,EAAQwC,qBACtBC,EAAgB,GACbxE,EAAI,EAAGA,EAAIoE,EAAiBpE,IACjCwE,EAAcC,KAAKC,EAAiBJ,EAAatE,IAErD,OAAOwE,CACV,EASKE,EAAmB,SAACC,EAASpF,GAC/B,IAAMqF,EAAMC,OAAOC,KAAKH,GAASpF,GAOjC,MALY,CACRwF,WAAY,GAAKtD,EACjBuD,YAAaJ,EACbK,WAAYN,EAAQC,GAG3B,EAEKM,EAAsB,yCAAG,mGAIvBnD,EAAQoD,uBAJe,wBAKvB3C,GAAqB,kBAAM,CAAN,KACrB4C,EAAAA,EAAAA,QAAUrC,EAAW,8EAEjBM,EAAOc,IAEPkB,EAA8C,KAAlC,IAAIC,MAAQC,oBACxBC,EAAgB,IAAIF,KAAKA,KAAKG,MAAQJ,GAAWK,cAAcC,MAAM,GAAI,GAE7EtC,EAAOA,EAAKtD,KAAI,SAAA6F,GAEZ,OADAA,EAAI,MAAYJ,EACTI,CACV,IAhBsB,UAmBJC,EAAAA,EAAAA,IAAYxC,EAAM7B,GAnBd,gBAwBnBsB,EAAAA,EAAAA,SAAYC,EAAW,iGAAwF+C,MAAK,WAAQpD,EAAeX,EAAQgE,UAAY,IACzJC,EAAQ,CACVC,eAAgB,EAChBC,QAAS3E,EAASG,KAEtByE,EAAAA,EAAAA,IAAmB5E,EAASG,GAAIsE,EAAOxE,GAGvCqB,EAAAA,EAAAA,cAAkCpB,GAClC2E,OAAOC,aAAaC,WAAW,uBAG/BtD,EAAAA,EAAAA,MApCmB,wBAuCvB9B,IAvCuB,4CAAH,qDAgD5B,OACI,+BACI,oBAASQ,GAAG,cAAc/B,UAAU,YAApC,SAEQsC,GACO,SAACsE,EAAA,EAAD,KACA,8BACEpE,GACM,SAACqE,EAAA,EAAD,CAAYC,KAAM,oFAClB,8BAGqB,OAAhBhE,GACO,SAACiE,EAAA,EAAD,CAAYC,cAAelE,IAC5BV,EAAQ0B,WAGF,iCACI,SAAC,EAAD,CACI9C,OAAQoB,EAAQ6E,WAAW7E,EAAQ8E,cACnCpH,aAzBnC,SAACqH,EAAazG,GAC/B0B,EAAQtC,aAAaqH,EAAazG,GAClC2B,EAAWD,EACd,KAyBmD,iBAAKpC,UAAU,sCAAf,WACI,gBAAK+B,GAAG,aAAR,UACI,mBACIqF,KAAK,SACLpH,UAAU,4BACVqH,QAAS,kBAAMnD,GAAqB,EAA3B,EAHb,yBAQJ,gBAAKnC,GAAG,cAAc/B,UAAU,cAAhC,UACI,yBACKoC,EAAQ8E,aAAe,EAD5B,OACmC9E,EAAQkF,aAAe,OAG7DlF,EAAQ8E,aAAe9E,EAAQkF,cACzB,gBAAKvF,GAAG,aAAR,UACC,mBACIqF,KAAK,SACLpH,UAAU,0BACVqH,QAASnD,EAHb,0BAQD,gBAAKnC,GAAG,aAAR,UACC,mBACIA,GAAG,gBACHqF,KAAK,SACLpH,UAAU,0BACVqH,QAAS9B,EACTgC,SAAU3E,EALd,yBAWXhB,EAASoC,UACJ,gBAAKhE,UAAU,qCAAf,UACE,0BACI,mBACIoH,KAAK,SACLpH,UAAU,6BACVqH,QAAS,kBApNzEjF,EAAQoF,6BACRpF,EAAQqF,yBAmNiE,EAHb,uCASN,SAGV,gBAAKzH,UAAU,+DAA+DC,MAAO,CAAEyH,OAAQ,QAA/F,UACI,iBAAK1H,UAAU,+DAAf,WACI,gBACI2H,IAAKC,EACLC,MAAM,MACNH,OAAO,MACPI,IAAI,oBAER,eAAI9H,UAAU,mBAAd,6EAW3D,EC1PD,EAhC6B,WAEzB,IAEQ4B,GAFcF,EAAAA,EAAAA,YAAWC,EAAAA,GAAzBF,UAEAG,SAER,OACI,+BACI,gBACI5B,UAAU,8BADd,UAII,kBAAMA,UAAU,yDAAhB,WACI,SAAC+H,EAAA,EAAD,CAAiBnG,SAAUA,KAE3B,iBAAK5B,UAAU,uBAAf,WAEI,0BACI,SAAC,EAAD,OAEJ,mBAEA,SAACgI,EAAA,EAAD,aAQvB,C","sources":["components/Surveys/Question.jsx","components/Surveys/Questions.jsx","components/Surveys/Survey.jsx","components/Surveys/Surveys.jsx","pages/ModuloAutoevaluativo.jsx"],"sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport Answer from './Answer'\r\n\r\nconst Question = ({\r\n    question,\r\n    name,\r\n    index,\r\n    color,\r\n    selectOption,\r\n    answerSelected\r\n}) => {\r\n    return (\r\n        <div className=\"mb-4  col-12  col-lg-6\">\r\n            <div\r\n                className=\"card-header  d-flex align-items-center\"\r\n                style={{ backgroundColor: color }}\r\n            >\r\n                <h5 className=\"my-0 font-weight-normal text-white  \">\r\n                    {(index + 1) + \". \" + question.question}\r\n                </h5>\r\n            </div>\r\n            <div className=\"border shadow w-100 card-body float-left pt-0\">\r\n                <div className=\"float-left d-flex flex-column\">\r\n                    {question.answer.map((answer, i) => {\r\n                        return (\r\n                            <Answer\r\n                                _name={`${name}_${index}`}\r\n                                _text_answer={answer.answer}\r\n                                _id={`answer_${answer.id_answer}`}\r\n                                key={`${answer.id_answer}`}\r\n                                handleClickAnswer={() => selectOption(\r\n                                    question.id_question,\r\n                                    answer.id_answer\r\n                                )}\r\n                                id_answerDB={answer.id_answer}\r\n                                answerSelected={answerSelected}\r\n                                index={index}\r\n                            />\r\n                        )\r\n                    })}\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nQuestion.propTypes = {\r\n    name: PropTypes.string,\r\n    question: PropTypes.object\r\n}\r\n\r\nexport default Question\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport Question from \"./Question\";\r\n\r\n\r\nconst Questions = ({\r\n    questions,\r\n    name,\r\n    color,\r\n    selectOption,\r\n}) => {\r\n    return (\r\n        <div className=\"mx-4 my-4 \">\r\n            <div className=\"row\">\r\n                {questions.map((question, index) => {\r\n                    return (\r\n                        <Question\r\n                            name={name}\r\n                            question={question}\r\n                            index={index}\r\n                            color={color}\r\n                            key={question.id_question}\r\n                            selectOption={selectOption}\r\n                            answerSelected={question.selected}\r\n                        />\r\n                    );\r\n                })}\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\nQuestions.propTypes = {\r\n    questions: PropTypes.array,\r\n};\r\n\r\nexport default Questions;\r\n","import React from 'react'\r\nimport Questions from './Questions'\r\n\r\nconst Survey = ({ survey, selectOption }) => {\r\n    const root = document.documentElement\r\n    root.style.setProperty('--colorCheck', survey.color) // Sirve para cambiar el color del check.\r\n\r\n    return (\r\n        <>\r\n            <div className=\"callout mb-4\" style={{ borderLeftColor: survey.color }}>\r\n                <h5 style={{ color: survey.color }}>{survey.name}</h5>\r\n\r\n                <p>{survey.desc}</p>\r\n            </div>\r\n            <Questions\r\n                questions={survey.questions}\r\n                name={survey.name}\r\n                color={survey.color}\r\n                key={survey.name + survey.id_survey}\r\n                selectOption={selectOption}\r\n            />\r\n        </>\r\n    )\r\n}\r\n\r\nSurvey.propTypes = {\r\n}\r\n\r\nexport default Survey\r\n","/* eslint-disable new-cap */\r\n/* eslint-disable camelcase */\r\nimport React, { useContext, useEffect, useState } from 'react'\r\nimport { Surveysx as model_surveys } from './assets/js/Surveysx'\r\nimport '../../assets/css/Surveys.scss'\r\nimport Survey from './Survey'\r\nimport ganso_pensando from '../../assets/img/ganso/ganso_pensando.png'\r\nimport { ErrorAlert, SendAlert, SendOkAlert, SendBadAlert } from '../../helpers/helper_Swal_Alerts'\r\nimport { GET_vista_pregunta_respuesta as getSurveys, POST_usuario_encuesta as SendSurveys } from '../../helpers/helperApi'\r\nimport { ErrorGanso } from '../ErrorGanso'\r\nimport { Loading } from '../Loading'\r\nimport { Resultados } from './Resultados'\r\nimport { AuthContext } from '../../context/AuthContext'\r\nimport { SurveysLocalStorage } from './assets/js/Surveys_localStorage'\r\nimport Scroll from '../../helpers/helperScroll'\r\nimport { PUT_avance_modulos } from '../../helpers/helperApi'\r\n\r\n\r\nconst errorFaltaPorResponder = () => {\r\n    ErrorAlert('Ups...', 'Parece que alguna pregunta de esta encuesta ha quedado sin responder. por favor, asegurate de que <b> todas </b> las preguntas tengan respuesta')\r\n}\r\n\r\nconst Surveys = () => {\r\n    const { authState } = useContext(AuthContext)\r\n\r\n    const { userInfo, token } = authState\r\n\r\n    const id_user = userInfo.id\r\n    const id_sexo_user = userInfo.sexo.id\r\n\r\n    const [surveys, setSurveys] = useState(new model_surveys(null, id_user, id_sexo_user, false))\r\n    const [loading, setLoading] = useState(true)\r\n    const [error, setError] = useState(false)\r\n    const [nextOrPrev, setNextOrPrev] = useState(false) // lo uso para cargar las preguntas si da back.\r\n    const [isBtnSendDisabled, setIsBtnSendDisabled] = useState(false)\r\n    const [showResults, setShowResults] = useState(null)\r\n\r\n    const recuperarDatosLocalStorage = () => {\r\n        let datos\r\n        try {\r\n            datos = SurveysLocalStorage.recuperarDatosLocalStorage(id_user)\r\n            if (datos) {\r\n                //  Si los datos fueron recuperados.\r\n                SendOkAlert('¡En horabuena!', '¡He podido recuperar tus respuestas! Intenta terminar de responder las preguntas. Si tienes alguna falla de conexión, solo podre mantenerlas guardadas temporalmente hasta 48 horas. Una vez termines el módulo y envíes tus respuestas completas, se guardaran definitivamente.', undefined, undefined)\r\n            } else {\r\n                SendBadAlert('Ups...', '¡Lo siento! Han pasado mas de 48 horas desde la ultima vez que intentaste responder las preguntas. Inténtalo nuevamente.<br/> Recuerda que si tienes alguna falla de conexión, solo podre mantenerlas guardadas temporalmente hasta 48 horas. Una vez termines el módulo y envíes tus respuestas completas, se guardaran definitivamente', undefined, undefined)\r\n            }\r\n            return datos\r\n        } catch (error) {\r\n            return null //  no se encontraron datos.\r\n        }\r\n    }\r\n\r\n    const llenarEncuesta = () => {\r\n        surveys.selectAllOptionRandom()\r\n        surveys.markAllQuestionSelected()\r\n    }\r\n\r\n    useEffect(() => {\r\n        const fetchData = async () => {\r\n            const response = await getSurveys(token)\r\n            //console.log(response)\r\n            if (response) {\r\n                try {\r\n                    const data = recuperarDatosLocalStorage()\r\n                    //console.log(data)\r\n                    if (data) {\r\n                        //console.log(data.datosSurveys)\r\n                        setSurveys(new model_surveys(response, id_user, id_sexo_user).loadDataLocalStorage(data.datosSurveys))\r\n                    } else {\r\n                        setSurveys(new model_surveys(response, id_user, id_sexo_user))\r\n                    }\r\n                    // setSurveys(surveys.loadDataLocalStorage(recuperarDatosLocalStorage()).clone());\r\n                    setLoading(false)\r\n                } catch (e) {\r\n                    //console.log(e)\r\n                    setLoading(false)\r\n                    setError(true)\r\n                }\r\n            } else {\r\n                setLoading(false)\r\n                setError(true)\r\n            }\r\n        }\r\n\r\n        fetchData();\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n    }, [])\r\n\r\n    useEffect(\r\n        function () {\r\n            if (surveys.arrSurvey) {\r\n                moveToStart()\r\n            }\r\n        },\r\n        // eslint-disable-next-line react-hooks/exhaustive-deps\r\n        [nextOrPrev]\r\n    )\r\n\r\n    const moveToStart = () => {\r\n        // TODO: desactivar en pruebas, puede resultar molesto.\r\n        !userInfo.is_staff ? Scroll.scroll(\"startSurvey\", true) : <></>\r\n    }\r\n    /**\r\n       * La funcion se encarga de lanzar la siguiente o anterior encuesta\r\n       * si cumple con los criterios establecidos.\r\n       * @param {boolean} isNext\r\n       */\r\n    const handeButtonNavSurvey = async (isNext = true) => {\r\n        /* bloque de prueba */\r\n        //  surveys.selectAllOptionRandom();\r\n        /* fin bloque de prueba */\r\n\r\n        if (!surveys.isAllQuestionsSelected() && isNext) {\r\n            errorFaltaPorResponder()\r\n        }\r\n\r\n        const newObjSurveys = isNext ? surveys.nextSurvey() : surveys.prevSurvey()\r\n        if (newObjSurveys) {\r\n            setSurveys(newObjSurveys)\r\n            setNextOrPrev(!nextOrPrev)\r\n        }\r\n    }\r\n\r\n    const buildDataToSend = () => {\r\n        const sizeDataSurveys = surveys.getLengthJsonSurvey()\r\n        const dataSurveys = surveys.generateJsonToSend()\r\n        const arrDataToSend = []\r\n        for (let i = 0; i < sizeDataSurveys; i++) {\r\n            arrDataToSend.push(createDataToSend(dataSurveys, i))\r\n        }\r\n        return arrDataToSend\r\n    }\r\n\r\n    /**\r\n      *\r\n      * @param {Array<JSON>} answers\r\n      * @param {Number} userId\r\n      * @param {Number} index\r\n      * @returns JSON\r\n      */\r\n    const createDataToSend = (answers, index) => {\r\n        const key = Object.keys(answers)[index]\r\n\r\n        const row = {\r\n            id_usuario: '' + id_user,\r\n            id_encuesta: key,\r\n            respuestas: answers[key]\r\n        }\r\n        return row\r\n    }\r\n\r\n    const handleButtonSendSurvey = async () => {\r\n        /* Antes de hacer la peticion, rectifica que todas las preguntas\r\n            de las encuestas tengan respuesta.\r\n          */\r\n        if (surveys.isAllSurveysAnswered()) {\r\n            setIsBtnSendDisabled(() => true)\r\n            SendAlert(undefined, 'Tus respuestas estan siendo enviadas y procesadas <b>Espera un momento</b>')\r\n            // Debería esperar una respuesta de todo ok., si la respuesta es negativa el boton vuelve a quedar\r\n            let data = buildDataToSend();\r\n\r\n            let tzoffset = (new Date()).getTimezoneOffset() * 60000; //offset in milliseconds\r\n            let localISOTime = (new Date(Date.now() - tzoffset)).toISOString().slice(0, -1);\r\n\r\n            data = data.map(item => {\r\n                item['fecha'] = localISOTime\r\n                return item\r\n            }\r\n            )\r\n            //console.log(data);\r\n            const send = await SendSurveys(data, token)\r\n            if (send) {\r\n                // TODO: Redireccionar a un lugar....\r\n                //console.log(surveys.jsonSurvey)\r\n\r\n                SendOkAlert(undefined, '¡Enhorabuena! ¡Tus respuestas han sido procesadas y <b>he traído los resultados</b>!').then(() => { setShowResults(surveys.results()) })\r\n                const jsonx = {\r\n                    autoevaluativo: 2,\r\n                    usuario: userInfo.id\r\n                }\r\n                PUT_avance_modulos(userInfo.id, jsonx, token)\r\n\r\n\r\n                SurveysLocalStorage.eliminarDatos(id_user)\r\n                window.localStorage.removeItem('data_survey_local') // Borrando el local storage...\r\n            } else {\r\n                //console.log(send)\r\n                SendBadAlert()\r\n            }\r\n        } else {\r\n            errorFaltaPorResponder()\r\n        }\r\n    }\r\n\r\n    const selectOption = (id_pregunta, id_answer) => {\r\n        surveys.selectOption(id_pregunta, id_answer)\r\n        setSurveys(surveys)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <section id=\"startSurvey\" className=\"container\">\r\n                {\r\n                    loading\r\n                        ? (<Loading />)\r\n                        : (<>\r\n                            {error\r\n                                ? (<ErrorGanso text={'Uhm... Parece que ha ocurrido un error al obtener las pruebas diagnósticas.'} />)\r\n                                : (<>\r\n\r\n                                    {\r\n                                        showResults !== null\r\n                                            ? (<Resultados objResultados={showResults} />)\r\n                                            : surveys.arrSurvey\r\n                                                ? (\r\n\r\n                                                    <>\r\n                                                        <Survey\r\n                                                            survey={surveys.jsonSurvey[surveys.indiceActual]}\r\n                                                            selectOption={selectOption}\r\n                                                        />\r\n\r\n                                                        <div className=\"d-flex justify-content-between mx-4\">\r\n                                                            <div id=\"backSurvey\">\r\n                                                                <button\r\n                                                                    type=\"button\"\r\n                                                                    className=\"btn btn-outline-secondary\"\r\n                                                                    onClick={() => handeButtonNavSurvey(false)}\r\n                                                                >\r\n                                                                    Anterior\r\n                                                                </button>\r\n                                                            </div>\r\n                                                            <div id=\"surveysPage\" className=\"d-block p-2\">\r\n                                                                <p>\r\n                                                                    {surveys.indiceActual + 1} de {surveys.IndiceMaximo + 1}\r\n                                                                </p>\r\n                                                            </div>\r\n                                                            {surveys.indiceActual < surveys.IndiceMaximo\r\n                                                                ? (<div id=\"nextSurvey\">\r\n                                                                    <button\r\n                                                                        type=\"button\"\r\n                                                                        className=\"btn btn-outline-primary\"\r\n                                                                        onClick={handeButtonNavSurvey}\r\n                                                                    >\r\n                                                                        Siguiente\r\n                                                                    </button>\r\n                                                                </div>)\r\n                                                                : (<div id=\"SendSurvey\">\r\n                                                                    <button\r\n                                                                        id=\"btnSendSurvey\"\r\n                                                                        type=\"button\"\r\n                                                                        className=\"btn btn-info text-white\"\r\n                                                                        onClick={handleButtonSendSurvey}\r\n                                                                        disabled={isBtnSendDisabled}\r\n                                                                    >\r\n                                                                        Enviar\r\n                                                                    </button>\r\n                                                                </div>)}\r\n                                                        </div>\r\n                                                        {userInfo.is_staff\r\n                                                            ? <div className=\"d-flex justify-content-center mx-4\">\r\n                                                                <div>\r\n                                                                    <button\r\n                                                                        type=\"button\"\r\n                                                                        className=\"btn btn-danger text-center\"\r\n                                                                        onClick={() => llenarEncuesta()}\r\n                                                                    >\r\n                                                                        Test: llenar encuesta\r\n                                                                    </button>\r\n                                                                </div>\r\n                                                            </div>\r\n                                                            : null}\r\n                                                    </>)\r\n                                                : (\r\n                                                    <div className=\"d-flex flex-column justify-content-center align-items-center\" style={{ height: '80vh' }}>\r\n                                                        <div className=\"d-flex flex-column justify-content-center align-items-center\" >\r\n                                                            <img\r\n                                                                src={ganso_pensando}\r\n                                                                width=\"307\"\r\n                                                                height=\"307\"\r\n                                                                alt='ganso_pensando'\r\n                                                            />\r\n                                                            <h5 className='my-4 text-center'>Uhm... Parece que no tengo pruebas diagnósticas.</h5>\r\n                                                        </div>\r\n                                                    </div>)}\r\n\r\n                                </>)}\r\n                        </>)\r\n                }\r\n\r\n            </section>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Surveys\r\n","/* eslint-disable camelcase */\r\nimport React, { useContext } from 'react'\r\n\r\nimport '../assets/css/nucleo-icons.scss'\r\nimport '../assets/css/nucleo-svg.scss'\r\nimport '../components/Dashboard/assets/css/Dashboard.scss'\r\nimport NavBarDashboard from '../components/Dashboard/NavBarDashboard'\r\nimport FooterDashboard from '../components/Dashboard/FooterDashboard'\r\n\r\nimport { AuthContext } from '../context/AuthContext'\r\nimport Surveys from '../components/Surveys/Surveys'\r\n\r\nconst ModuloAutoevaluativo = () => {\r\n    // Trae los datos del usuario\r\n    const { authState } = useContext(AuthContext)\r\n    // Se guardan en userInfo\r\n    const { userInfo } = authState\r\n\r\n    return (\r\n        <>\r\n            <div\r\n                className=\"g-sidenav-show bg-gray-100 \"\r\n            >\r\n\r\n                <main className=\"main-content position-relative h-100 border-radius-lg \">\r\n                    <NavBarDashboard userInfo={userInfo} />\r\n\r\n                    <div className=\"container-fluid py-4\">\r\n\r\n                        <div >\r\n                            <Surveys />\r\n                        </div>\r\n                        <hr />\r\n\r\n                        <FooterDashboard />\r\n\r\n                    </div>\r\n                </main>\r\n            </div>\r\n\r\n        </>\r\n    )\r\n}\r\n\r\nexport default ModuloAutoevaluativo\r\n"],"names":["question","name","index","color","selectOption","answerSelected","className","style","backgroundColor","answer","map","i","Answer","_name","_text_answer","_id","id_answer","handleClickAnswer","id_question","id_answerDB","questions","selected","survey","document","documentElement","setProperty","borderLeftColor","desc","id_survey","errorFaltaPorResponder","ErrorAlert","authState","useContext","AuthContext","userInfo","token","id_user","id","id_sexo_user","sexo","useState","model_surveys","surveys","setSurveys","loading","setLoading","error","setError","nextOrPrev","setNextOrPrev","isBtnSendDisabled","setIsBtnSendDisabled","showResults","setShowResults","recuperarDatosLocalStorage","datos","SurveysLocalStorage","SendOkAlert","undefined","SendBadAlert","useEffect","fetchData","getSurveys","response","data","loadDataLocalStorage","datosSurveys","e","arrSurvey","moveToStart","is_staff","Scroll","handeButtonNavSurvey","isNext","isAllQuestionsSelected","newObjSurveys","nextSurvey","prevSurvey","buildDataToSend","sizeDataSurveys","getLengthJsonSurvey","dataSurveys","generateJsonToSend","arrDataToSend","push","createDataToSend","answers","key","Object","keys","id_usuario","id_encuesta","respuestas","handleButtonSendSurvey","isAllSurveysAnswered","SendAlert","tzoffset","Date","getTimezoneOffset","localISOTime","now","toISOString","slice","item","SendSurveys","then","results","jsonx","autoevaluativo","usuario","PUT_avance_modulos","window","localStorage","removeItem","Loading","ErrorGanso","text","Resultados","objResultados","jsonSurvey","indiceActual","id_pregunta","type","onClick","IndiceMaximo","disabled","selectAllOptionRandom","markAllQuestionSelected","height","src","ganso_pensando","width","alt","NavBarDashboard","FooterDashboard"],"sourceRoot":""}